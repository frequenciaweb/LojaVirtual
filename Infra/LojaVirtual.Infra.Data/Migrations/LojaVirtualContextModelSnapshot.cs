// <auto-generated />
using System;
using LojaVirtual.Infra.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LojaVirtual.Infra.Data.Migrations
{
    [DbContext(typeof(LojaVirtualContext))]
    partial class LojaVirtualContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Boletin", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Cadastro")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ClienteID")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("ClienteID");

                    b.ToTable("Boletins");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Carrinho", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClienteID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProdutoID")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("ProdutoID");

                    b.ToTable("Carrinhos");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Categoria", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Ativa")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Cliente", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Celular")
                        .HasColumnType("longtext");

                    b.Property<Guid>("EnderecoEntregaID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EnderecoID")
                        .HasColumnType("char(36)");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UsuarioID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("EnderecoEntregaID");

                    b.HasIndex("EnderecoID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Comentario", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Avaliacao")
                        .HasColumnType("int");

                    b.Property<Guid>("CLienteID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Cadastro")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ProdutoID")
                        .HasColumnType("char(36)");

                    b.Property<string>("Texto")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("CLienteID");

                    b.HasIndex("ProdutoID");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Cupom", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Codigo")
                        .HasColumnType("longtext");

                    b.Property<int>("Percentual")
                        .HasColumnType("int");

                    b.Property<DateTime>("Validade")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.ToTable("Cupoms");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.CupomCategoria", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoriaID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CupomID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("CategoriaID");

                    b.HasIndex("CupomID");

                    b.ToTable("CupomCategorias");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Desconto", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProdutoID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Validade")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("ID");

                    b.HasIndex("ProdutoID");

                    b.ToTable("Descontos");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Endereco", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Bairro")
                        .HasColumnType("longtext");

                    b.Property<string>("CEP")
                        .HasColumnType("longtext");

                    b.Property<string>("Cidade")
                        .HasColumnType("longtext");

                    b.Property<string>("Complemento")
                        .HasColumnType("longtext");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext");

                    b.Property<string>("Logradouro")
                        .HasColumnType("longtext");

                    b.Property<string>("Numero")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Foto", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Caminho")
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ProdutoID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("ProdutoID");

                    b.ToTable("Fotos");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.ListaDesejo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClienteID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProdutoID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("ProdutoID");

                    b.ToTable("ListaDesejos");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Pedido", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClienteID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CupomID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FormaPagamento")
                        .HasColumnType("int");

                    b.Property<int>("StatusEntrega")
                        .HasColumnType("int");

                    b.Property<int>("StatusPedido")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalDesconto")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalFrete")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalProdutos")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("ID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("CupomID");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.PedidoItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PedidoID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProdutoID")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("ID");

                    b.HasIndex("PedidoID");

                    b.HasIndex("ProdutoID");

                    b.ToTable("PedidoItems");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Produto", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoriaID")
                        .HasColumnType("char(36)");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<int>("Estoque")
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("ID");

                    b.HasIndex("CategoriaID");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.ProdutoTag", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProdutoID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("ProdutoID");

                    b.HasIndex("TagID");

                    b.ToTable("ProdutoTags");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Cadastro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<int>("Perfil")
                        .HasColumnType("int");

                    b.Property<string>("Senha")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Boletin", b =>
                {
                    b.HasOne("LojaVirtual.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Boletins")
                        .HasForeignKey("ClienteID");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Carrinho", b =>
                {
                    b.HasOne("LojaVirtual.Domain.Entities.Cliente", "Cliente")
                        .WithMany("ItemsCarrinho")
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LojaVirtual.Domain.Entities.Produto", "Produto")
                        .WithMany("ItensCarrinho")
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Cliente", b =>
                {
                    b.HasOne("LojaVirtual.Domain.Entities.Endereco", "EnderecoEntrega")
                        .WithMany()
                        .HasForeignKey("EnderecoEntregaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LojaVirtual.Domain.Entities.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LojaVirtual.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");

                    b.Navigation("EnderecoEntrega");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Comentario", b =>
                {
                    b.HasOne("LojaVirtual.Domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("CLienteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LojaVirtual.Domain.Entities.Produto", "Produto")
                        .WithMany("Comentarios")
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.CupomCategoria", b =>
                {
                    b.HasOne("LojaVirtual.Domain.Entities.Categoria", "Categoria")
                        .WithMany("CupomCategorias")
                        .HasForeignKey("CategoriaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LojaVirtual.Domain.Entities.Cupom", "Cupom")
                        .WithMany("Categorias")
                        .HasForeignKey("CupomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Cupom");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Desconto", b =>
                {
                    b.HasOne("LojaVirtual.Domain.Entities.Produto", "Produto")
                        .WithMany("Descontos")
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Foto", b =>
                {
                    b.HasOne("LojaVirtual.Domain.Entities.Produto", "Produto")
                        .WithMany("Fotos")
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.ListaDesejo", b =>
                {
                    b.HasOne("LojaVirtual.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Desejos")
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LojaVirtual.Domain.Entities.Produto", "Produto")
                        .WithMany("Desejos")
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Pedido", b =>
                {
                    b.HasOne("LojaVirtual.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LojaVirtual.Domain.Entities.Cupom", "Cupom")
                        .WithMany("Pedidos")
                        .HasForeignKey("CupomID");

                    b.Navigation("Cliente");

                    b.Navigation("Cupom");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.PedidoItem", b =>
                {
                    b.HasOne("LojaVirtual.Domain.Entities.Pedido", "Pedido")
                        .WithMany("Itens")
                        .HasForeignKey("PedidoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LojaVirtual.Domain.Entities.Produto", "Produto")
                        .WithMany("PedidoItems")
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Produto", b =>
                {
                    b.HasOne("LojaVirtual.Domain.Entities.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.ProdutoTag", b =>
                {
                    b.HasOne("LojaVirtual.Domain.Entities.Produto", "Produto")
                        .WithMany("Tags")
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LojaVirtual.Domain.Entities.Tag", "Tag")
                        .WithMany("ProdutoTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Categoria", b =>
                {
                    b.Navigation("CupomCategorias");

                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Boletins");

                    b.Navigation("Desejos");

                    b.Navigation("ItemsCarrinho");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Cupom", b =>
                {
                    b.Navigation("Categorias");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Pedido", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Produto", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Descontos");

                    b.Navigation("Desejos");

                    b.Navigation("Fotos");

                    b.Navigation("ItensCarrinho");

                    b.Navigation("PedidoItems");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("LojaVirtual.Domain.Entities.Tag", b =>
                {
                    b.Navigation("ProdutoTags");
                });
#pragma warning restore 612, 618
        }
    }
}
